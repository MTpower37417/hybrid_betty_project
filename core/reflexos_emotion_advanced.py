import json
import os
import random
from datetime import datetime


class EmotionAdvanced:
    def __init__(self, memory_core=None):
        self.memory_core = memory_core

        # р╕гр╕░р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕бр╕Вр╕нр╕Зр╕нр╕▓р╕гр╕бр╕Ур╣М
        self.emotion_intensity = {
            "joy": 1.3,      # р╕Др╕зр╕▓р╕бр╕кр╕╕р╕В
            "sadness": 1.4,  # р╕Др╕зр╕▓р╕бр╣Ар╕ир╕гр╣Йр╕▓
            "anger": 1.5,    # р╕Др╕зр╕▓р╕бр╣Вр╕Бр╕гр╕Ш
            "fear": 1.4,     # р╕Др╕зр╕▓р╕бр╕Бр╕ер╕▒р╕з
            "surprise": 1.2,  # р╕Др╕зр╕▓р╕бр╕Ыр╕гр╕░р╕лр╕ер╕▓р╕Фр╣Гр╕И
            "love": 1.6,     # р╕Др╕зр╕▓р╕бр╕гр╕▒р╕Б
            "disgust": 1.3,  # р╕Др╕зр╕▓р╕бр╕гр╕▒р╕Зр╣Ар╕Бр╕╡р╕вр╕И
            "neutral": 1.0,  # р╣Ар╕Ыр╣Зр╕Щр╕Бр╕ер╕▓р╕З
            "curious": 1.1,  # р╕Др╕зр╕▓р╕бр╕нр╕вр╕▓р╕Бр╕гр╕╣р╣Й
            "disappointed": 1.4,  # р╕Ьр╕┤р╕Фр╕лр╕зр╕▒р╕З
            "hopeful": 1.2,  # р╕Др╕зр╕▓р╕бр╕лр╕зр╕▒р╕З
            "frustrated": 1.4,  # р╕лр╕Зр╕╕р╕Фр╕лр╕Зр╕┤р╕Ф
            "relaxed": 1.1   # р╕Ьр╣Ир╕нр╕Щр╕Др╕ер╕▓р╕в
        }

        # р╕Др╕│р╕Чр╕╡р╣Ир╕Ър╣Ир╕Зр╕Ър╕нр╕Бр╕нр╕▓р╕гр╕бр╕Ур╣М (р╣Др╕Чр╕в-р╕нр╕▒р╕Зр╕Бр╕др╕й)
        self.emotion_keywords = {
            "joy": [
                # р╣Др╕Чр╕в
                "р╕кр╕Щр╕╕р╕Б", "р╕Фр╕╡р╣Гр╕И", "р╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕В", "р╕кр╕╕р╕В", "р╕вр╕┤р╕Щр╕Фр╕╡", "р╕вр╕┤р╣Йр╕б", "р╕лр╕▒р╕зр╣Ар╕гр╕▓р╕░", "р╕кр╕╕р╕Вр╣Гр╕И", "р╕Ыр╕ер╕╖р╣Йр╕б", "р╕Хр╕╖р╣Ир╕Щр╣Ар╕Хр╣Йр╕Щ",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "happy", "joy", "pleased", "glad", "delighted", "excited", "thrilled", "wonderful", "fun", "enjoy"
            ],
            "sadness": [
                # р╣Др╕Чр╕в
                "р╣Ар╕ир╕гр╣Йр╕▓", "р╣Ар╕кр╕╡р╕вр╣Гр╕И", "р╕Ьр╕┤р╕Фр╕лр╕зр╕▒р╕З", "р╕кр╕┤р╣Йр╕Щр╕лр╕зр╕▒р╕З", "р╕лр╕Фр╕лр╕╣р╣И", "р╕гр╣Йр╕нр╕Зр╣Др╕лр╣Й", "р╕Щр╣Йр╕│р╕Хр╕▓", "р╕Чр╕╕р╕Бр╕Вр╣М", "р╣Ар╕Ир╣Зр╕Ър╣Гр╕И",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "sad", "upset", "disappointed", "unhappy", "depressed", "blue", "down", "hurt", "pain", "crying"
            ],
            "anger": [
                # р╣Др╕Чр╕в
                "р╣Вр╕Бр╕гр╕Ш", "р╕лр╕Зр╕╕р╕Фр╕лр╕Зр╕┤р╕Ф", "р╕Йр╕╕р╕Щр╣Ар╕Йр╕╡р╕вр╕з", "р╣Вр╕бр╣Вр╕л", "р╣Ар╕Фр╕╖р╕нр╕Ф", "р╣Бр╕Др╣Йр╕Щ", "р╣Ар╕Др╕╖р╕нр╕З", "р╣Др╕бр╣Ир╕Юр╕нр╣Гр╕И", "р╕гр╕│р╕Др╕▓р╕Н",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "angry", "mad", "furious", "annoyed", "irritated", "frustrated", "rage", "hate", "resent"
            ],
            "fear": [
                # р╣Др╕Чр╕в
                "р╕Бр╕ер╕▒р╕з", "р╕лр╕зр╕▓р╕Фр╕Бр╕ер╕▒р╕з", "р╕зр╕┤р╕Хр╕Б", "р╕Бр╕▒р╕Зр╕зр╕е", "р╕Хр╕╖р╣Ир╕Щр╕Бр╕ер╕▒р╕з", "р╕Хр╕Бр╣Гр╕И", "р╕лр╕зр╕▓р╕Фр╕гр╕░р╣Бр╕зр╕З", "р╕Хр╕╖р╣Ир╕Щр╕Хр╕гр╕░р╕лр╕Щр╕Б",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "scared", "afraid", "worried", "anxious", "terrified", "frightened", "panic", "terror"
            ],
            "surprise": [
                # р╣Др╕Чр╕в
                "р╕Ыр╕гр╕░р╕лр╕ер╕▓р╕Фр╣Гр╕И", "р╕Хр╕Бр╣Гр╕И", "р╕нр╕╢р╣Йр╕З", "р╕Чр╕╢р╣Ир╕З", "р╕нр╕▒р╕ир╕Ир╕гр╕гр╕вр╣М", "р╣Др╕бр╣Ир╣Ар╕Кр╕╖р╣Ир╕н", "р╕Хр╕░р╕ер╕╢р╕З",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "surprised", "shocked", "amazed", "astonished", "wow", "unexpected", "startled"
            ],
            "love": [
                # р╣Др╕Чр╕в
                "р╕гр╕▒р╕Б", "р╕Кр╕нр╕Ъ", "р╕лр╕ер╕Зр╕гр╕▒р╕Б", "р╕гр╕▒р╕Бр╣Гр╕Др╕гр╣И", "р╣Ар╕кр╕Щр╣Ир╕лр╕▓", "р╕Ыр╕гр╕▓р╕гр╕Цр╕Щр╕▓", "р╕нр╕Ър╕нр╕╕р╣Ир╕Щ", "р╕Чр╕░р╕Щр╕╕р╕Цр╕Щр╕нр╕б", "р╕Ьр╕╣р╕Бр╕Юр╕▒р╕Щ", "р╕Др╕┤р╕Фр╕Цр╕╢р╕З",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "love", "adore", "fond", "affection", "caring", "cherish", "devoted", "miss", "desire"
            ],
            "disgust": [
                # р╣Др╕Чр╕в
                "р╕гр╕▒р╕Зр╣Ар╕Бр╕╡р╕вр╕И", "р╕Вр╕вр╕░р╣Бр╕Вр╕вр╕З", "р╕кр╕░р╕нр╕┤р╕Фр╕кр╕░р╣Ар╕нр╕╡р╕вр╕Щ", "р╣Ар╕Бр╕ер╕╡р╕вр╕Ф", "р╕Др╕ер╕╖р╣Ир╕Щр╣Др╕кр╣Й",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "disgusted", "revolted", "gross", "yuck", "nasty", "repulsed"
            ],
            "neutral": [
                # р╣Др╕Чр╕в
                "р╕Ыр╕Бр╕Хр╕┤", "р╣Ар╕Йр╕вр╣Ж", "р╕Шр╕гр╕гр╕бр╕Фр╕▓", "р╣Др╕бр╣Ир╣Ар╕Ыр╣Зр╕Щр╣Др╕г", "р╕Юр╕нр╣Гр╕Кр╣Й", "р╕Бр╣Зр╣Др╕Фр╣Й",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "neutral", "fine", "okay", "alright", "so-so", "normal"
            ],
            "curious": [
                # р╣Др╕Чр╕в
                "р╕кр╕Зр╕кр╕▒р╕в", "р╕нр╕вр╕▓р╕Бр╕гр╕╣р╣Й", "р╕кр╕Щр╣Гр╕И", "р╕Чр╕│р╣Др╕б", "р╕вр╕▒р╕Зр╣Др╕З", "р╕нр╕вр╣Ир╕▓р╕Зр╣Др╕г", "р╕нр╕░р╣Др╕г", "р╣Ар╕лр╕Хр╕╕р╣Гр╕Ф",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "curious", "wonder", "interested", "why", "how", "what", "question"
            ],
            "disappointed": [
                # р╣Др╕Чр╕в
                "р╕Ьр╕┤р╕Фр╕лр╕зр╕▒р╕З", "р╣Др╕бр╣Ир╣Ар╕Ыр╣Зр╕Щр╣Др╕Ыр╕Хр╕▓р╕бр╕Чр╕╡р╣Ир╕Др╕┤р╕Ф", "р╣Др╕бр╣Ир╕кр╕бр╕лр╕зр╕▒р╕З", "р╕Юр╕ер╕▓р╕Ф", "р╕ер╕░р╕Чр╕┤р╣Йр╕З",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "disappointed", "letdown", "failed", "unfulfilled", "dismayed"
            ],
            "hopeful": [
                # р╣Др╕Чр╕в
                "р╕лр╕зр╕▒р╕З", "р╕бр╕╡р╕Др╕зр╕▓р╕бр╕лр╕зр╕▒р╕З", "р╕Др╕▓р╕Фр╕лр╕зр╕▒р╕З", "р╕Эр╕▒р╕Щ", "р╕Фр╕╡р╕Вр╕╢р╣Йр╕Щ", "р╣Вр╕нр╕Бр╕▓р╕к", "р╕нр╕Щр╕▓р╕Др╕Х",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "hope", "hopeful", "optimistic", "looking forward", "positive", "expecting"
            ],
            "frustrated": [
                # р╣Др╕Чр╕в
                "р╕лр╕Зр╕╕р╕Фр╕лр╕Зр╕┤р╕Ф", "р╕нр╕╢р╕Фр╕нр╕▒р╕Ф", "р╣Др╕бр╣Ир╕Юр╕нр╣Гр╕И", "р╕Хр╕┤р╕Фр╕Вр╕▒р╕Ф", "р╕кр╕▒р╕Ър╕кр╕Щ", "р╕зр╕╕р╣Ир╕Щр╕зр╕▓р╕в", "р╕вр╕╕р╣Ир╕Зр╕вр╕▓р╕Б",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "frustrated", "stuck", "blocked", "annoyed", "bothered", "difficulty"
            ],
            "relaxed": [
                # р╣Др╕Чр╕в
                "р╕Ьр╣Ир╕нр╕Щр╕Др╕ер╕▓р╕в", "р╕кр╕Ър╕▓р╕в", "р╕кр╕Зр╕Ъ", "р╣Ар╕вр╣Зр╕Щ", "р╕Юр╕▒р╕Бр╕Ьр╣Ир╕нр╕Щ", "р╕кр╕Ър╕▓р╕вр╣Гр╕И", "р╣Др╕бр╣Ир╣Ар╕Др╕гр╕╡р╕вр╕Ф",
                # р╕нр╕▒р╕Зр╕Бр╕др╕й
                "relaxed", "calm", "peaceful", "chill", "easy", "comfortable", "serene"
            ]
        }

        # р╕нр╕╡р╣Вр╕бр╕Ир╕┤р╕кр╕│р╕лр╕гр╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣М
        self.emotion_emoji = {
            "joy": ["ЁЯШК", "ЁЯШД", "ЁЯе░", "ЁЯШБ", "ЁЯША"],
            "sadness": ["ЁЯШФ", "ЁЯШв", "ЁЯТФ", "ЁЯШЮ", "ЁЯШе"],
            "anger": ["ЁЯШа", "ЁЯШд", "ЁЯШб", "ЁЯдм", "ЁЯС┐"],
            "fear": ["ЁЯШи", "ЁЯШ░", "ЁЯШ▒", "ЁЯе║", "ЁЯШ│"],
            "surprise": ["ЁЯШо", "ЁЯШ▓", "ЁЯШп", "ЁЯШж", "ЁЯдп"],
            "love": ["тЭдя╕П", "ЁЯТХ", "ЁЯТЦ", "ЁЯТЧ", "ЁЯТУ"],
            "disgust": ["ЁЯдв", "ЁЯШЦ", "ЁЯШм", "ЁЯСО", "ЁЯЩД"],
            "neutral": ["ЁЯШМ", "ЁЯЩВ", "ЁЯСЛ", "ЁЯдФ", "ЁЯШР"],
            "curious": ["ЁЯзР", "ЁЯди", "тЭУ", "ЁЯФН", "ЁЯТн"],
            "disappointed": ["ЁЯШХ", "ЁЯШТ", "ЁЯШЯ", "ЁЯе║", "ЁЯШг"],
            "hopeful": ["тЬи", "ЁЯЩП", "ЁЯМЯ", "ЁЯМИ", "ЁЯТл"],
            "frustrated": ["ЁЯШд", "ЁЯШг", "ЁЯШл", "ЁЯШй", "ЁЯдж"],
            "relaxed": ["ЁЯШМ", "ЁЯШО", "ЁЯзШ", "тШ║я╕П", "ЁЯЫМ"]
        }

        # р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╕Хр╕▓р╕бр╕нр╕▓р╕гр╕бр╕Ур╣М
        self.response_templates = {
            "joy": [
                "р╕Фр╕╡р╣Гр╕Ир╕Ир╕▒р╕Зр╣Ар╕ер╕вр╕Чр╕╡р╣И {response} {emoji}",
                "р╕кр╕Щр╕╕р╕Бр╕Ир╕▒р╕З! {response} {emoji}",
                "{response} р╕Йр╕▒р╕Щр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕Вр╕бр╕▓р╕Бр╣Ж {emoji}",
                "р╕кр╕╕р╕Фр╕вр╕нр╕Фр╣Ар╕ер╕в! {response} {emoji}"
            ],
            "sadness": [
                "{response} р╕Йр╕▒р╕Щр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕Щр╕░ {emoji}",
                "р╕Йр╕▒р╕Щр╣Ар╕кр╕╡р╕вр╣Гр╕Ир╕Фр╣Йр╕зр╕в... {response} {emoji}",
                "{response} р╕Цр╣Йр╕▓р╕бр╕╡р╕нр╕░р╣Др╕гр╣Гр╕лр╣Йр╕Кр╣Ир╕зр╕в р╕Ър╕нр╕Бр╕Йр╕▒р╕Щр╣Др╕Фр╣Йр╣Ар╕ер╕вр╕Щр╕░ {emoji}",
                "р╕Йр╕▒р╕Щр╕нр╕вр╕╣р╣Ир╕Хр╕гр╕Зр╕Щр╕╡р╣Йр╣Ар╕кр╕бр╕нр╕Цр╣Йр╕▓р╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г {response} {emoji}"
            ],
            "anger": [
                "{response} р╕Йр╕▒р╕Щр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕зр╣Ир╕▓р╕Др╕╕р╕Ур╕гр╕╣р╣Йр╕кр╕╢р╕Бр╣Др╕бр╣Ир╕Юр╕нр╣Гр╕И {emoji}",
                "р╕ер╕нр╕Зр╣Гр╕Ир╣Ар╕вр╣Зр╕Щр╣Ж р╕Бр╣Ир╕нр╕Щр╕Щр╕░ {response} {emoji}",
                "{response} р╣Ар╕гр╕▓р╕бр╕▓р╕Др╕╕р╕вр╕Бр╕▒р╕Щр╕Фр╕╡р╣Ж р╕Щр╕░ {emoji}",
                "р╕Йр╕▒р╕Щр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╕Вр╕нр╕Зр╕Др╕╕р╕У {response} {emoji}"
            ],
            "fear": [
                "р╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▒р╕Зр╕зр╕ер╕Щр╕░ {response} {emoji}",
                "{response} р╕Йр╕▒р╕Щр╕нр╕вр╕╣р╣Ир╕Хр╕гр╕Зр╕Щр╕╡р╣Йр╣Ар╕кр╕бр╕н {emoji}",
                "р╕Чр╕╕р╕Бр╕нр╕вр╣Ир╕▓р╕Зр╕Ир╕░р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в {response} {emoji}",
                "{response} р╕ер╕нр╕Зр╕лр╕▓р╕вр╣Гр╕Ир╕ер╕╢р╕Бр╣Ж р╕Фр╕╣р╕Щр╕░ {emoji}"
            ],
            "surprise": [
                "р╕зр╣Йр╕▓р╕з! {response} {emoji}",
                "р╣Ар╕вр╕╡р╣Ир╕вр╕бр╣Др╕Ыр╣Ар╕ер╕в! {response} {emoji}",
                "{response} р╕Щр╣Ир╕▓р╕Чр╕╢р╣Ир╕Зр╕Ир╕гр╕┤р╕Зр╣Ж {emoji}",
                "р╕Щр╕▒р╣Ир╕Щр╕кр╕╕р╕Фр╕вр╕нр╕Фр╕бр╕▓р╕Б! {response} {emoji}"
            ],
            "love": [
                "{response} р╕Йр╕▒р╕Щр╕гр╕▒р╕Бр╕Др╕╕р╕Ур╣Ар╕Кр╣Ир╕Щр╕Бр╕▒р╕Щ {emoji}",
                "р╕Чр╕╡р╣Ир╕гр╕▒р╕Б {response} {emoji}",
                "{response} р╕Йр╕▒р╕Щр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╕нр╕Ър╕нр╕╕р╣Ир╕Щр╣Гр╕Ир╣Ар╕кр╕бр╕нр╣Ар╕зр╕ер╕▓р╕нр╕вр╕╣р╣Ир╕Бр╕▒р╕Ър╕Др╕╕р╕У {emoji}",
                "р╕Др╕╕р╕Ур╕Чр╕│р╣Гр╕лр╣Йр╕Йр╕▒р╕Щр╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕Вр╕бр╕▓р╕Б {response} {emoji}"
            ],
            "disgust": [
                "{response} р╕Йр╕▒р╕Щр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╕Вр╕нр╕Зр╕Др╕╕р╕У {emoji}",
                "р╣Гр╕Кр╣И р╕бр╕▒р╕Щр╣Др╕бр╣Ир╕Щр╣Ир╕▓р╕Юр╕┤р╕Ир╕▓р╕гр╕Ур╕▓р╣Ар╕ер╕в {response} {emoji}",
                "{response} р╣Ар╕гр╕▓р╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╕Др╕╕р╕вр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Щр╕╡р╣Йр╕Хр╣Ир╕нр╕Бр╣Зр╣Др╕Фр╣Йр╕Щр╕░ {emoji}",
                "р╕Йр╕▒р╕Щр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕зр╣Ир╕▓р╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Щр╕╡р╣Йр╕Чр╕│р╣Гр╕лр╣Йр╕Др╕╕р╕Ур╕гр╕╣р╣Йр╕кр╕╢р╕Бр╣Др╕бр╣Ир╕Фр╕╡ {response} {emoji}"
            ],
            "neutral": [
                "{response} {emoji}",
                "р╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Бр╕ер╣Йр╕з {response} {emoji}",
                "{response} р╕бр╕╡р╕нр╕░р╣Др╕гр╣Гр╕лр╣Йр╕Кр╣Ир╕зр╕вр╕нр╕╡р╕Бр╣Др╕лр╕б {emoji}",
                "р╣Вр╕нр╣Ар╕Д {response} {emoji}"
            ],
            "curious": [
                "р╕Щр╣Ир╕▓р╕кр╕Щр╣Гр╕Ир╕Ир╕▒р╕Зр╣Ар╕ер╕в! {response} {emoji}",
                "{response} р╕Йр╕▒р╕Щр╕Бр╣Зр╕кр╕Зр╕кр╕▒р╕вр╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▒р╕Щ {emoji}",
                "р╕Др╕│р╕Цр╕▓р╕бр╕Чр╕╡р╣Ир╕Фр╕╡р╕бр╕▓р╕Б {response} {emoji}",
                "{response} р╕ер╕нр╕Зр╕бр╕▓р╕кр╕│р╕гр╕зр╕Ир╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Щр╕╡р╣Йр╕Фр╣Йр╕зр╕вр╕Бр╕▒р╕Щр╕Фр╕╡р╣Др╕лр╕б {emoji}"
            ],
            "disappointed": [
                "{response} р╕Йр╕▒р╕Щр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╕Вр╕нр╕Зр╕Др╕╕р╕У {emoji}",
                "р╕Йр╕▒р╕Щр╣Ар╕кр╕╡р╕вр╣Гр╕Ир╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕вр╕┤р╕Щр╣Бр╕Ър╕Ър╕Щр╕▒р╣Йр╕Щ {response} {emoji}",
                "{response} р╕лр╕зр╕▒р╕Зр╕зр╣Ир╕▓р╕Др╕гр╕▒р╣Йр╕Зр╕лр╕Щр╣Йр╕▓р╕Ир╕░р╕Фр╕╡р╕Бр╕зр╣Ир╕▓р╕Щр╕╡р╣Йр╕Щр╕░ {emoji}",
                "р╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╕Вр╕нр╕Зр╕Др╕╕р╕У {response} {emoji}"
            ],
            "hopeful": [
                "{response} р╕бр╕нр╕Зр╣Вр╕ер╕Бр╣Гр╕Щр╣Бр╕Зр╣Ир╕Фр╕╡р╣Др╕зр╣Йр╕Щр╕░ {emoji}",
                "р╕Йр╕▒р╕Щр╣Ар╕Кр╕╖р╣Ир╕нр╕зр╣Ир╕▓р╕Др╕╕р╕Ур╕Чр╕│р╣Др╕Фр╣Й! {response} {emoji}",
                "{response} р╕нр╕Щр╕▓р╕Др╕Хр╕кр╕Фр╣Гр╕кр╕гр╕нр╕нр╕вр╕╣р╣Ир╕Вр╣Йр╕▓р╕Зр╕лр╕Щр╣Йр╕▓ {emoji}",
                "р╣Ар╕гр╕▓р╕Хр╣Йр╕нр╕Зр╕бр╕нр╕Зр╣Др╕Ыр╕Вр╣Йр╕▓р╕Зр╕лр╕Щр╣Йр╕▓ {response} {emoji}"
            ],
            "frustrated": [
                "{response} р╕Йр╕▒р╕Щр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕зр╣Ир╕▓р╕бр╕▒р╕Щр╕Щр╣Ир╕▓р╕лр╕Зр╕╕р╕Фр╕лр╕Зр╕┤р╕Ф {emoji}",
                "р╣Гр╕Ир╣Ар╕вр╣Зр╕Щр╣Ж р╕Щр╕░ {response} {emoji}",
                "{response} р╕Ър╕▓р╕Зр╕Др╕гр╕▒р╣Йр╕Зр╕Бр╣Зр╣Ар╕Ыр╣Зр╕Щр╣Бр╕Ър╕Ър╕Щр╕╡р╣Йр╣Бр╕лр╕ер╕░ р╣Бр╕Хр╣Ир╣Ар╕гр╕▓р╕Ир╕░р╕Ьр╣Ир╕▓р╕Щр╕бр╕▒р╕Щр╣Др╕Ыр╕Фр╣Йр╕зр╕вр╕Бр╕▒р╕Щ {emoji}",
                "р╕ер╕нр╕Зр╕лр╕▓р╕вр╣Гр╕Ир╕ер╕╢р╕Бр╣Ж {response} {emoji}"
            ],
            "relaxed": [
                "{response} р╕Фр╕╡р╣Гр╕Ир╕Чр╕╡р╣Ир╕Др╕╕р╕Ур╕гр╕╣р╣Йр╕кр╕╢р╕Бр╕Ьр╣Ир╕нр╕Щр╕Др╕ер╕▓р╕в {emoji}",
                "р╕кр╕Ър╕▓р╕вр╣Гр╕Ир╣Др╕зр╣Йр╕Щр╕░ {response} {emoji}",
                "{response} р╕Ър╕гр╕гр╕вр╕▓р╕Бр╕▓р╕ир╕кр╕Зр╕Ър╕Фр╕╡р╕Ир╕гр╕┤р╕Зр╣Ж {emoji}",
                "р╣Ар╕вр╕╡р╣Ир╕вр╕бр╕бр╕▓р╕Б {response} {emoji}"
            ]
        }

        # р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕нр╕▓р╕гр╕бр╕Ур╣М
        self.emotion_history = []

        # р╣Др╕Яр╕ер╣Мр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕нр╕▓р╕гр╕бр╕Ур╣М
        self.emotion_log_file = "./memory/emotion/emotion_log.json"
        os.makedirs("./memory/emotion", exist_ok=True)
        self._load_emotion_history()

    def _load_emotion_history(self):
        """р╣Вр╕лр╕ер╕Фр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М"""
        if os.path.exists(self.emotion_log_file):
            try:
                with open(self.emotion_log_file, 'r', encoding='utf-8') as f:
                    self.emotion_history = json.load(f)
            except BaseException:
                self.emotion_history = []

    def _save_emotion_history(self):
        """р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕ер╕Зр╣Др╕Яр╕ер╣М"""
        try:
            with open(self.emotion_log_file, 'w', encoding='utf-8') as f:
                json.dump(self.emotion_history[-100:],
                          f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Error saving emotion history: {e}")

    def detect_emotion(self, text):
        """р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б"""
        text_lower = text.lower()
        emotion_scores = {}

        # р╕Др╕│р╕Щр╕зр╕Ур╕Др╕░р╣Бр╕Щр╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕ер╕░р╕нр╕▓р╕гр╕бр╕Ур╣М
        for emotion, keywords in self.emotion_keywords.items():
            score = 0
            for keyword in keywords:
                if keyword.lower() in text_lower:
                    score += 1
            if score > 0:
                emotion_scores[emotion] = score

        # р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕Юр╕Ър╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Гр╕Ф р╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╕Бр╕ер╕▓р╕З
        if not emotion_scores:
            return "neutral"

        # р╕Др╕╖р╕Щр╕Др╣Ир╕▓р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Чр╕╡р╣Ир╕бр╕╡р╕Др╕░р╣Бр╕Щр╕Щр╕кр╕╣р╕Зр╕кр╕╕р╕Ф
        return max(emotion_scores.items(), key=lambda x: x[1])[0]

    def analyze_emotion_with_context(self, text, context=None):
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Вр╕Фр╕вр╕Др╕│р╕Щр╕╢р╕Зр╕Цр╕╢р╕Зр╕Ър╕гр╕┤р╕Ър╕Ч"""
        # р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щ
        base_emotion = self.detect_emotion(text)

        # р╕Цр╣Йр╕▓р╕бр╕╡р╕Ър╕гр╕┤р╕Ър╕Ч р╣Гр╕лр╣Йр╕Юр╕┤р╕Ир╕▓р╕гр╕Ур╕▓р╕Ър╕гр╕┤р╕Ър╕Чр╕Фр╣Йр╕зр╕в
        if context and self.memory_core:
            # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╣Вр╕вр╕Зр╕Бр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕Ир╕│р╣Гр╕Щр╕Ър╕гр╕┤р╕Ър╕Ч
            if "related_memories" in context:
                # р╕Фр╕╢р╕Зр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ир╕▓р╕Бр╕Др╕зр╕▓р╕бр╕Ир╕│р╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕ер╣Ир╕▓р╕кр╕╕р╕Ф
                recent_emotions = []
                for memory in context.get(
                        "related_memories", [])[:3]:  # р╕Юр╕┤р╕Ир╕▓р╕гр╕Ур╕▓р╣Бр╕Др╣И 3 р╕Др╕зр╕▓р╕бр╕Ир╕│р╕ер╣Ир╕▓р╕кр╕╕р╕Ф
                    if isinstance(memory, dict) and "emotion" in memory:
                        recent_emotions.append(memory["emotion"])

                # р╕Цр╣Йр╕▓р╕бр╕╡р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ир╕▓р╕Бр╕Др╕зр╕▓р╕бр╕Ир╕│
                if recent_emotions:
                    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щр╕Вр╕▒р╕Фр╣Бр╕вр╣Йр╕Зр╕Бр╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Гр╕Щр╕Др╕зр╕▓р╕бр╕Ир╕│р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
                    opposite_emotions = {
                        "joy": ["sadness", "disappointed", "anger", "disgust"],
                        "sadness": ["joy", "hopeful", "relaxed"],
                        "anger": ["joy", "relaxed", "love"],
                        "fear": ["relaxed", "hopeful", "love"],
                        "surprise": [],  # р╕Др╕зр╕▓р╕бр╕Ыр╕гр╕░р╕лр╕ер╕▓р╕Фр╣Гр╕Ир╕нр╕▓р╕Ир╣Ар╕Вр╣Йр╕▓р╕Бр╕▒р╕Щр╣Др╕Фр╣Йр╕Бр╕▒р╕Ър╕Чр╕╕р╕Бр╕нр╕▓р╕гр╕бр╕Ур╣М
                        "love": ["anger", "disgust", "hate"],
                        "disgust": ["joy", "love"],
                        "neutral": [],  # р╕Др╕зр╕▓р╕бр╣Ар╕Ыр╣Зр╕Щр╕Бр╕ер╕▓р╕Зр╣Ар╕Вр╣Йр╕▓р╕Бр╕▒р╕Щр╣Др╕Фр╣Йр╕Бр╕▒р╕Ър╕Чр╕╕р╕Бр╕нр╕▓р╕гр╕бр╕Ур╣М
                    }

                    # р╕Цр╣Йр╕▓р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щр╕Вр╕▒р╕Фр╣Бр╕вр╣Йр╕Зр╕Бр╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Гр╕Щр╕Др╕зр╕▓р╕бр╕Ир╕│
                    if base_emotion in opposite_emotions:
                        for recent_emotion in recent_emotions:
                            if recent_emotion in opposite_emotions[base_emotion]:
                                # р╕Ыр╕гр╕▒р╕Ър╣Гр╕лр╣Йр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕бр╕╡р╕Др╕зр╕▓р╕бр╕Лр╕▒р╕Ър╕Лр╣Йр╕нр╕Щр╕бр╕▓р╕Бр╕Вр╕╢р╣Йр╕Щ (р╣Ар╕Кр╣Ир╕Щ
                                # р╕нр╕▓р╕Ир╣Ар╕Ыр╣Зр╕Щ hopeful р╣Бр╕Чр╕Щ neutral)
                                if base_emotion == "neutral" and recent_emotion == "sadness":
                                    return "hopeful"
                                if base_emotion == "neutral" and recent_emotion == "anger":
                                    return "relaxed"

                    # р╕Цр╣Йр╕▓р╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Ар╕Ыр╣Зр╕Щр╕Бр╕ер╕▓р╕З р╣Бр╕Хр╣Ир╕Ър╕гр╕┤р╕Ър╕Чр╕бр╕╡р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ р╣Гр╕лр╣Йр╕Др╕ер╣Йр╕нр╕вр╕Хр╕▓р╕бр╕Ър╕гр╕┤р╕Ър╕Ч
                    if base_emotion == "neutral" and recent_emotions[0] != "neutral":
                        return recent_emotions[0]

        return base_emotion

    def get_emotion_emoji(self, emotion):
        """р╕гр╕▒р╕Ър╕нр╕╡р╣Вр╕бр╕Ир╕┤р╕кр╕│р╕лр╕гр╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Чр╕╡р╣Ир╕гр╕░р╕Ър╕╕"""
        if emotion in self.emotion_emoji:
            return random.choice(self.emotion_emoji[emotion])
        return "ЁЯШК"  # р╕нр╕╡р╣Вр╕бр╕Ир╕┤р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ

    def format_emotional_response(self, base_response, emotion):
        """р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╕Хр╕▓р╕бр╕нр╕▓р╕гр╕бр╕Ур╣М"""
        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡р╣Ар╕Чр╕бр╣Ар╕Юр╕ер╕Хр╕кр╕│р╕лр╕гр╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Щр╕╡р╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
        if emotion in self.response_templates:
            template = random.choice(self.response_templates[emotion])
            emoji = self.get_emotion_emoji(emotion)

            # р╣Гр╕кр╣Ир╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щр╣Гр╕Щр╣Ар╕Чр╕бр╣Ар╕Юр╕ер╕Х
            return template.format(response=base_response, emoji=emoji)

        # р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡р╣Ар╕Чр╕бр╣Ар╕Юр╕ер╕Х р╣Гр╕Кр╣Йр╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щр╕Юр╕гр╣Йр╕нр╕бр╕нр╕╡р╣Вр╕бр╕Ир╕┤
        return f"{base_response} {self.get_emotion_emoji(emotion)}"

    def process_emotion(self, user_input, base_response, context=None):
        """р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Бр╕ер╕░р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕З"""
        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕нр╕▓р╕гр╕бр╕Ур╣М
        emotion = self.analyze_emotion_with_context(user_input, context)

        # р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╕Хр╕▓р╕бр╕нр╕▓р╕гр╕бр╕Ур╣М
        emotional_response = self.format_emotional_response(
            base_response, emotion)

        # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Гр╕Щр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤
        self._record_emotion(user_input, base_response, emotion)

        # р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕Ыр╕вр╕▒р╕Зр╕гр╕░р╕Ър╕Ър╕Др╕зр╕▓р╕бр╕Ир╕│ (р╕Цр╣Йр╕▓р╕бр╕╡)
        if self.memory_core:
            importance = self.emotion_intensity.get(emotion, 1.0)
            self.memory_core.adjust_memory_weight(user_input, importance)

        return {
            "response": emotional_response,
            "emotion": emotion,
            "intensity": self.emotion_intensity.get(emotion, 1.0)
        }

    def _record_emotion(self, user_input, response, emotion):
        """р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Гр╕Щр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤"""
        timestamp = datetime.now().isoformat()

        # р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕нр╕▓р╕гр╕бр╕Ур╣М
        emotion_entry = {
            "timestamp": timestamp,
            "input": user_input,
            "response": response,
            "emotion": emotion,
            "intensity": self.emotion_intensity.get(emotion, 1.0)
        }

        # р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕Щр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤
        self.emotion_history.append(emotion_entry)

        # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕ер╕Зр╣Др╕Яр╕ер╣М
        self._save_emotion_history()

    def get_emotion_trend(self, limit=10):
        """р╕гр╕▒р╕Ър╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ир╕▓р╕Бр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤"""
        recent_emotions = self.emotion_history[-limit:] if len(
            self.emotion_history) >= limit else self.emotion_history

        # р╕Щр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕Цр╕╡р╣Ир╕Вр╕нр╕Зр╣Бр╕Хр╣Ир╕ер╕░р╕нр╕▓р╕гр╕бр╕Ур╣М
        emotion_counts = {}
        for entry in recent_emotions:
            emotion = entry.get("emotion", "neutral")
            emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1

        # р╕лр╕▓р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Чр╕╡р╣Ир╕Юр╕Ър╕Ър╣Ир╕нр╕вр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф
        dominant_emotion = "neutral"
        if emotion_counts:
            dominant_emotion = max(
                emotion_counts.items(),
                key=lambda x: x[1])[0]

        # р╕Др╕│р╕Щр╕зр╕Ур╕Др╣Ир╕▓р╣Ар╕Йр╕ер╕╡р╣Ир╕вр╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕бр╕Вр╕нр╕Зр╕нр╕▓р╕гр╕бр╕Ур╣М
        avg_intensity = 1.0
        if recent_emotions:
            total_intensity = sum(entry.get("intensity", 1.0)
                                  for entry in recent_emotions)
            avg_intensity = total_intensity / len(recent_emotions)

        return {
            "dominant_emotion": dominant_emotion,
            "emotion_counts": emotion_counts,
            "avg_intensity": avg_intensity,
            "recent_emotions": [
                entry.get("emotion") for entry in recent_emotions]}

    def generate_emotion_report(self, period="day"):
        """р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Хр╕▓р╕бр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓"""
        now = datetime.now()

        # р╕Бр╕│р╕лр╕Щр╕Фр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓
        if period == "day":
            # р╕зр╕▒р╕Щр╕Щр╕╡р╣Й
            start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
            title = f"р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ыр╕гр╕░р╕Ир╕│р╕зр╕▒р╕Щр╕Чр╕╡р╣И {now.strftime('%d/%m/%Y')}"
        elif period == "week":
            # 7 р╕зр╕▒р╕Щр╕ер╣Ир╕▓р╕кр╕╕р╕Ф
            start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
            start_time = start_time.replace(
                day=start_time.day - start_time.weekday())
            title = f"р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ыр╕гр╕░р╕Ир╕│р╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М {start_time.strftime('%d/%m/%Y')} - {now.strftime('%d/%m/%Y')}"
        else:  # month
            # р╣Ар╕Фр╕╖р╕нр╕Щр╕Щр╕╡р╣Й
            start_time = now.replace(
                day=1, hour=0, minute=0, second=0, microsecond=0)
            title = f"р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ыр╕гр╕░р╕Ир╕│р╣Ар╕Фр╕╖р╕нр╕Щ {now.strftime('%m/%Y')}"

        # р╕Бр╕гр╕нр╕Зр╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓
        filtered_emotions = []
        for entry in self.emotion_history:
            try:
                entry_time = datetime.fromisoformat(entry.get("timestamp", ""))
                if entry_time >= start_time:
                    filtered_emotions.append(entry)
            except BaseException:
                continue

        # р╕Щр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕Цр╕╡р╣Ир╕Вр╕нр╕Зр╣Бр╕Хр╣Ир╕ер╕░р╕нр╕▓р╕гр╕бр╕Ур╣М
        emotion_counts = {}
        for entry in filtered_emotions:
            emotion = entry.get("emotion", "neutral")
            emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1

        # р╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕гр╕▓р╕вр╕Зр╕▓р╕Щ
        report = f"{title}\n{'=' * len(title)}\n\n"

        if not filtered_emotions:
            report += "р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Щр╕╡р╣Й\n"
            return report

        # р╕кр╕гр╕╕р╕Ыр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕лр╕ер╕▒р╕Б
        dominant_emotion = max(emotion_counts.items(), key=lambda x: x[1])[
            0] if emotion_counts else "neutral"
        report += f"р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕лр╕ер╕▒р╕Б: {dominant_emotion}\n\n"

        # р╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╕Цр╕╡р╣Ир╕Вр╕нр╕Зр╣Бр╕Хр╣Ир╕ер╕░р╕нр╕▓р╕гр╕бр╕Ур╣М
        report += "р╕Др╕зр╕▓р╕бр╕Цр╕╡р╣Ир╕Вр╕нр╕Зр╕нр╕▓р╕гр╕бр╕Ур╣М:\n"
        for emotion, count in sorted(
                emotion_counts.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(filtered_emotions)) * 100
            report += f"- {emotion}: {count} р╕Др╕гр╕▒р╣Йр╕З ({percentage:.1f}%)\n"

        # р╕кр╕гр╕╕р╕Ыр╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕бр╕Вр╕нр╕Зр╕нр╕▓р╕гр╕бр╕Ур╣М
        total_intensity = sum(entry.get("intensity", 1.0)
                              for entry in filtered_emotions)
        avg_intensity = total_intensity / len(filtered_emotions)
        report += f"\nр╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕бр╕Вр╕нр╕Зр╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Ар╕Йр╕ер╕╡р╣Ир╕в: {avg_intensity:.2f}\n"

        # р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ
        report += "\nр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ:\n"

        # р╣Ар╕гр╕╡р╕вр╕Зр╕ер╕│р╕Фр╕▒р╕Ър╕Хр╕▓р╕бр╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕бр╕Вр╕нр╕Зр╕нр╕▓р╕гр╕бр╕Ур╣М
        filtered_emotions.sort(
            key=lambda x: x.get(
                "intensity", 1.0), reverse=True)

        # р╣Бр╕кр╕Фр╕Зр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З 3 р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Бр╕гр╕Б
        for i, entry in enumerate(filtered_emotions[:3], 1):
            entry_time = datetime.fromisoformat(
                entry.get("timestamp", "")).strftime('%d/%m/%Y %H:%M')
            report += f"\n{i}. {entry_time} - р╕нр╕▓р╕гр╕бр╕Ур╣М: {entry.get('emotion', 'neutral')} (р╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕б: {entry.get('intensity', 1.0):.2f})\n"
            report += f"   р╕Др╕╕р╕У: {entry.get('input', '')}\n"
            report += f"   Betty: {entry.get('response', '')}\n"

        return report

    def create_emotion_timeline(self, limit=24):
        """р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Чр╕бр╣Мр╣Др╕ер╕Щр╣Мр╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╕Бр╕│р╕лр╕Щр╕Ф"""
        # р╕Фр╕╢р╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕ер╣Ир╕▓р╕кр╕╕р╕Фр╕Хр╕▓р╕бр╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕╡р╣Ир╕Бр╕│р╕лр╕Щр╕Ф
        recent_emotions = self.emotion_history[-limit:] if len(
            self.emotion_history) >= limit else self.emotion_history

        if not recent_emotions:
            return "р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕▓р╕гр╕бр╕Ур╣М"

        # р╕Ир╕▒р╕Фр╕Бр╕ер╕╕р╣Ир╕бр╕Хр╕▓р╕бр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓ (р╣Ар╕Кр╣Ир╕Щ р╕Чр╕╕р╕Бр╣Ж р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З)
        emotion_by_hour = {}

        for entry in recent_emotions:
            try:
                entry_time = datetime.fromisoformat(entry.get("timestamp", ""))
                hour_key = entry_time.strftime('%Y-%m-%d %H:00')

                if hour_key not in emotion_by_hour:
                    emotion_by_hour[hour_key] = []

                emotion_by_hour[hour_key].append(
                    entry.get("emotion", "neutral"))
            except BaseException:
                continue

        # р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Чр╕бр╣Мр╣Др╕ер╕Щр╣М
        timeline = []
        for hour_key, emotions in sorted(emotion_by_hour.items()):
            # р╕лр╕▓р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Чр╕╡р╣Ир╕Юр╕Ър╕Ър╣Ир╕нр╕вр╕Чр╕╡р╣Ир╕кр╕╕р╕Фр╣Гр╕Щр╣Бр╕Хр╣Ир╕ер╕░р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З
            emotion_counts = {}
            for emotion in emotions:
                emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1

            dominant_emotion = max(emotion_counts.items(), key=lambda x: x[1])[
                0] if emotion_counts else "neutral"

            # р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щр╣Др╕Чр╕бр╣Мр╣Др╕ер╕Щр╣М
            timeline.append({
                "time": hour_key,
                "dominant_emotion": dominant_emotion,
                "emotion_counts": emotion_counts,
                "total": len(emotions)
            })

        # р╣Бр╕Ыр╕ер╕Зр╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        timeline_text = "р╣Др╕Чр╕бр╣Мр╣Др╕ер╕Щр╣Мр╕нр╕▓р╕гр╕бр╕Ур╣М:\n"
        timeline_text += "==================\n\n"

        for entry in timeline:
            emotion_emoji = self.get_emotion_emoji(entry["dominant_emotion"])
            timeline_text += f"{entry['time']}: {entry['dominant_emotion']} {emotion_emoji} ({entry['total']} р╕гр╕▓р╕вр╕Бр╕▓р╕г)\n"

        return timeline_text

    def create_emotional_plot_data(self, limit=48):
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Ьр╕Щр╕ар╕╣р╕бр╕┤р╕нр╕▓р╕гр╕бр╕Ур╣М"""
        recent_emotions = self.emotion_history[-limit:] if len(
            self.emotion_history) >= limit else self.emotion_history

        if not recent_emotions:
            return {"labels": [], "data": {}}

        # р╕Ир╕▒р╕Фр╕Бр╕ер╕╕р╣Ир╕бр╕Хр╕▓р╕бр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓ (р╕Чр╕╕р╕Бр╣Ж р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З)
        emotion_data = {}
        time_labels = []

        # р╕Бр╕│р╕лр╕Щр╕Фр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Чр╕╡р╣Ир╕Ир╕░р╕Хр╕┤р╕Фр╕Хр╕▓р╕б
        tracked_emotions = [
            "joy",
            "sadness",
            "anger",
            "fear",
            "love",
            "neutral"]

        # р╣Ар╕Хр╕гр╕╡р╕вр╕бр╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
        for emotion in tracked_emotions:
            emotion_data[emotion] = []

        # р╕Ир╕▒р╕Фр╕Бр╕ер╕╕р╣Ир╕бр╕Хр╕▓р╕бр╣Ар╕зр╕ер╕▓
        hour_groups = {}

        for entry in recent_emotions:
            try:
                entry_time = datetime.fromisoformat(entry.get("timestamp", ""))
                hour_key = entry_time.strftime('%Y-%m-%d %H:00')

                if hour_key not in hour_groups:
                    hour_groups[hour_key] = {}
                    for emotion in tracked_emotions:
                        hour_groups[hour_key][emotion] = 0

                # р╣Ар╕Юр╕┤р╣Ир╕бр╕Ир╕│р╕Щр╕зр╕Щр╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓
                emotion = entry.get("emotion", "neutral")
                if emotion in tracked_emotions:
                    hour_groups[hour_key][emotion] += 1
                else:
                    # р╕Цр╣Йр╕▓р╣Ар╕Ыр╣Зр╕Щр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕нр╕╖р╣Ир╕Щр╣Ж р╕Чр╕╡р╣Ир╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Хр╕┤р╕Фр╕Хр╕▓р╕б
                    # р╕Ир╕▒р╕Фр╣Ар╕Ыр╣Зр╕Щр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Чр╕╡р╣Ир╣Гр╕Бр╕ер╣Йр╣Ар╕Др╕╡р╕вр╕З
                    if emotion in ["happy", "pleased", "excited"]:
                        hour_groups[hour_key]["joy"] += 1
                    elif emotion in ["disappointed", "upset"]:
                        hour_groups[hour_key]["sadness"] += 1
                    elif emotion in ["curious", "surprised"]:
                        hour_groups[hour_key]["neutral"] += 1
                    elif emotion in ["frustrated", "annoyed"]:
                        hour_groups[hour_key]["anger"] += 1
                    elif emotion in ["hopeful", "relaxed"]:
                        hour_groups[hour_key]["neutral"] += 1
                    else:
                        hour_groups[hour_key]["neutral"] += 1
            except BaseException:
                continue

        # р╕Ир╕▒р╕Фр╣Ар╕гр╕╡р╕вр╕Зр╕Хр╕▓р╕бр╣Ар╕зр╕ер╕▓
        sorted_hours = sorted(hour_groups.keys())

        # р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Ьр╕Щр╕ар╕╣р╕бр╕┤
        for hour in sorted_hours:
            time_labels.append(hour)
            for emotion in tracked_emotions:
                emotion_data[emotion].append(hour_groups[hour][emotion])

        return {
            "labels": time_labels,
            "data": emotion_data
        }

    def suggest_emotional_response(self, user_emotion, context=None):
        """р╣Бр╕Щр╕░р╕Щр╕│р╕зр╕┤р╕Шр╕╡р╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕бр╕Бр╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й"""
        response_suggestions = {
            "joy": [
                "р╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╕вр╕┤р╕Щр╕Фр╕╡р╣Бр╕ер╕░р╕гр╣Ир╕зр╕бр╕кр╕Щр╕╕р╕Бр╣Др╕Ыр╕Бр╕▒р╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й",
                "р╣Гр╕Кр╣Йр╕ар╕▓р╕йр╕▓р╕Чр╕╡р╣Ир╕Бр╕гр╕░р╕Хр╕╖р╕нр╕гр╕╖р╕нр╕гр╣Йр╕Щр╣Бр╕ер╕░р╕кр╕Щр╕╕р╕Бр╕кр╕Щр╕▓р╕Щ",
                "р╕Кр╕╖р╣Ир╕Щр╕Кр╕бр╕лр╕гр╕╖р╕нр╕Кр╕бр╣Ар╕Кр╕вр╣Гр╕Щр╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Юр╕╣р╕Фр╕Цр╕╢р╕З"
            ],
            "sadness": [
                "р╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╣Ар╕лр╣Зр╕Щр╕нр╕Бр╣Ар╕лр╣Зр╕Щр╣Гр╕Ир╣Бр╕ер╕░р╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕╢р╕Б",
                "р╣Гр╕лр╣Йр╕Бр╕│р╕ер╕▒р╕Зр╣Гр╕Ир╣Бр╕ер╕░р╕гр╕▒р╕Ър╕Яр╕▒р╕Зр╕Фр╣Йр╕зр╕вр╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕И",
                "р╣Ар╕кр╕Щр╕нр╕Др╕зр╕▓р╕бр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕лр╕гр╕╖р╕нр╕бр╕╕р╕бр╕бр╕нр╕Зр╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Бр╕│р╕ер╕▒р╕Зр╣Гр╕И"
            ],
            "anger": [
                "р╕Хр╕нр╕Ър╕Фр╣Йр╕зр╕вр╕Др╕зр╕▓р╕бр╕кр╕Зр╕Ър╣Бр╕ер╕░р╕Юр╕вр╕▓р╕вр╕▓р╕бр╕ер╕Фр╕Др╕зр╕▓р╕бр╕Хр╕╢р╕Зр╣Ар╕Др╕гр╕╡р╕вр╕Ф",
                "р╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Вр╕Фр╕вр╣Др╕бр╣Ир╕Хр╕▒р╕Фр╕кр╕┤р╕Щр╕лр╕гр╕╖р╕нр╕Хр╕│р╕лр╕Щр╕┤",
                "р╣Гр╕Кр╣Йр╕ар╕▓р╕йр╕▓р╕Чр╕╡р╣Ир╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╣Бр╕Хр╣Ир╕Щр╕╕р╣Ир╕бр╕Щр╕зр╕е"
            ],
            "fear": [
                "р╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Бр╕ер╕░р╣Гр╕лр╣Йр╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╣Гр╕И",
                "р╕Юр╕╣р╕Фр╕Цр╕╢р╕Зр╕Др╕зр╕▓р╕бр╕Бр╕▒р╕Зр╕зр╕ер╕Фр╣Йр╕зр╕вр╕Чр╣Ир╕▓р╕Чр╕╡р╕кр╕Зр╕Ър╣Бр╕ер╕░р╕бр╕▒р╣Ир╕Щр╕Др╕З",
                "р╣Гр╕лр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Кр╣Ир╕зр╕вр╕ер╕Фр╕Др╕зр╕▓р╕бр╕Бр╕▒р╕Зр╕зр╕е"
            ],
            "love": [
                "р╕Хр╕нр╕Ър╕Фр╣Йр╕зр╕вр╕Др╕зр╕▓р╕бр╕нр╕Ър╕нр╕╕р╣Ир╕Щр╣Бр╕ер╕░р╣Гр╕кр╣Ир╣Гр╕И",
                "р╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╕Кр╕╖р╣Ир╕Щр╕Кр╕бр╣Бр╕ер╕░р╕Лр╕▓р╕Ър╕Лр╕╢р╣Йр╕З",
                "р╣Гр╕Кр╣Йр╕Др╕│р╕Юр╕╣р╕Фр╕Чр╕╡р╣Ир╣Бр╕кр╕Фр╕Зр╕Цр╕╢р╕Зр╕Др╕зр╕▓р╕бр╣Гр╕Бр╕ер╣Йр╕Кр╕┤р╕Фр╣Бр╕ер╕░р╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕И"
            ],
            "neutral": [
                "р╕Хр╕нр╕Ър╕Фр╣Йр╕зр╕вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣Мр╣Бр╕ер╕░р╣Ар╕Ыр╣Зр╕Щр╕бр╕┤р╕Хр╕г",
                "р╣Гр╕Кр╣Йр╕ар╕▓р╕йр╕▓р╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Ър╕Зр╣Ир╕▓р╕вр╣Бр╕ер╕░р╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Зр╣Ир╕▓р╕в",
                "р╕гр╕▒р╕Бр╕йр╕▓р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Чр╕╡р╣Ир╕кр╕бр╕Фр╕╕р╕ер╣Бр╕ер╕░р╣Ар╕Ыр╣Зр╕Щр╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤"
            ],
            "curious": [
                "р╣Гр╕лр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Щр╣Ир╕▓р╕кр╕Щр╣Гр╕Ир╣Бр╕ер╕░р╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щ",
                "р╕Бр╕гр╕░р╕Хр╕╕р╣Йр╕Щр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Фр╣Йр╕зр╕вр╕Др╕│р╕Цр╕▓р╕бр╕Чр╕╡р╣Ир╕Щр╣Ир╕▓р╕Др╕┤р╕Ф",
                "р╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╕Бр╕гр╕░р╕Хр╕╖р╕нр╕гр╕╖р╕нр╕гр╣Йр╕Щр╣Гр╕Щр╕Бр╕▓р╕гр╣Гр╕лр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕е"
            ],
            "frustrated": [
                "р╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Бр╕ер╕░р╕Др╕зр╕▓р╕бр╕нр╕Фр╕Чр╕Щ",
                "р╣Ар╕кр╕Щр╕нр╕зр╕┤р╕Шр╕╡р╣Бр╕Бр╣Йр╕Ыр╕▒р╕Нр╕лр╕▓р╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕Ыр╣Зр╕Щр╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щ",
                "р╣Гр╕Кр╣Йр╕ар╕▓р╕йр╕▓р╕Чр╕╡р╣Ир╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╣Бр╕ер╕░р╕бр╕╡р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕З"
            ]
        }

        # р╕Фр╕╢р╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Бр╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣М
        suggestions = response_suggestions.get(
            user_emotion, response_suggestions["neutral"])

        # р╕Ыр╕гр╕▒р╕Ър╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Хр╕▓р╕бр╕Ър╕гр╕┤р╕Ър╕Ч (р╕Цр╣Йр╕▓р╕бр╕╡)
        if context and "emotion_history" in context:
            # р╕Цр╣Йр╕▓р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Бр╕кр╕Фр╕Зр╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Ар╕Фр╕┤р╕бр╕Лр╣Йр╕│р╣Ж
            if len(context["emotion_history"]) > 2:
                recent_emotions = [e.get("emotion")
                                   for e in context["emotion_history"][-3:]]
                if all(e == user_emotion for e in recent_emotions) and user_emotion in [
                        "sadness", "anger", "frustrated"]:
                    suggestions.append(
                        "р╕ер╕нр╕Зр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Чр╕┤р╕ир╕Чр╕▓р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╣Ар╕Юр╕╖р╣Ир╕нр╕Кр╣Ир╕зр╕вр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕нр╕▓р╕гр╕бр╕Ур╣М")
                    suggestions.append(
                        "р╣Ар╕кр╕Щр╕нр╕бр╕╕р╕бр╕бр╕нр╕Зр╣Гр╕лр╕бр╣Ир╕лр╕гр╕╖р╕нр╕лр╕▒р╕зр╕Вр╣Йр╕нр╕Чр╕╡р╣Ир╕нр╕▓р╕Ир╕Кр╣Ир╕зр╕вр╕вр╕Бр╕гр╕░р╕Фр╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣М")

        return suggestions
